/*
 *  MIT License
 *
 * Copyright (c) 2018.  Icaro R D Temponi
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

buildscript {
    ext.gradle_version = '4.10'
    ext.kotlin_version = '1.2.61'
    ext.kotlintest_version = '3.1.7'
    ext.fuel_version = '1.15.0'
    ext.slf4j_version = '1.7.25'
    ext.klaxon_version = '3.0.1'
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.2.61'
    id 'com.palantir.git-version' version '0.11.0'
    id 'maven-publish'
}

group 'com.github.icarohs7'
version gitVersion().toString().find('(\\d\\.\\d\\.\\d)')
description 'A library to check artifact versions programmatically'
sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    testImplementation "io.kotlintest:kotlintest-runner-junit5:$kotlintest_version"
    testImplementation "org.slf4j:slf4j-simple:$slf4j_version"
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation "com.github.kittinunf.fuel:fuel-coroutines:$fuel_version"
    implementation "com.beust:klaxon:$klaxon_version"
}

repositories {
    mavenCentral()
    jcenter()
}

compileKotlin {
    kotlinOptions.jvmTarget = '1.8'
}

compileTestKotlin {
    kotlinOptions.jvmTarget = '1.8'
}

clean {
    new File('out').deleteDir()
}

test {
    useJUnitPlatform()
}

task wrapper(type: Wrapper) {
    gradleVersion "$gradle_version"
    distributionType = Wrapper.DistributionType.ALL
}

def properties = new Properties()
properties.load(new FileInputStream("$projectDir/local.properties"))